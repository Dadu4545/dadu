1- Newton Raphson Method:
import math as m

def jaynrm(fun, dfun, ddfun, x1, acc, maxitr):
    while abs(fun(x1) * ddfun(x1) / (dfun(x1))**2) > 1:
        print("Wrong Initial Guess")
        x1 = float(input("Enter New Value of x1: "))
    for itr in range(maxitr):
        x0 = x1 - fun(x1) / dfun(x1)
        if abs(x1 - x0) < acc:
            break
        x1 = x0  # Corrected indentation here
    return x0

result = jaynrm(lambda x: m.exp(x) - m.sin(x),
                lambda x: m.exp(x) - m.cos(x),
                lambda x: m.exp(x) + m.sin(x),
                -3, 0.000001, 100)

print("The Root is:", result)


2- Bisection Method:

import math as m

def jaybsm(fun, x1, x2, maxitr, acc):
    while fun(x1) * fun(x2) > 0:
        print("Wrong Initial Guess")
        x1 = float(input("Enter new value of x1: "))
        x2 = float(input("Enter new value of x2: "))
    for itr in range(maxitr):
        x0 = (x1 + x2) / 2
        if abs(x1 - x0) < acc:
            break
        if fun(x1) * fun(x0) < 0:
            x1 = x1
            x2 = x0
        elif fun(x1) * fun(x0) > 0:
            x1 = x0
            x2 = x2
    return x0

result = jaybsm(lambda x: 1 - x * m.sin(x), 1, 2, 100, 0.0000001)
print("The ans is:", result)

3- Gauss Elimination Method:

import numpy as np

def jaygem(a, d):
    a = np.array(a, dtype=float)
    d = np.array(d, dtype=float)
    n = len(d)

    for i in range(0, n, 1):
        for k in range(i + 1, n, 1):
            f = a[k, i] / a[i, i]
            for j in range(0, n, 1):
                a[k, j] = a[k, j] - f * a[i, j]
            d[k] = d[k] - f * d[i]

    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        temp = 0
        for j in range(i + 1, n, 1):
            temp = temp + a[i, j] * x[j]
        x[i] = (d[i] - temp) / a[i, i]

    return x

result = jaygem([[1, 3, 2], [2, 4, 3], [3, 6, 2]], [[9], [14], [16]])
print("Answer:", result)

4- Gauss siedle method:

import numpy as np

def jaygsm(a, d, maxitr, acc=1e-6):
    a = np.array(a, dtype=float)
    d = np.array(d, dtype=float)
    n = len(d)
    x = np.zeros(n)

    for itr in range(maxitr):
        x_old = np.copy(x)
        for i in range(n):
            term = 0
            for j in range(n):
                if j != i:
                    term += a[i, j] * x[j]
            x[i] = (d[i] - term) / a[i, i]

        if np.linalg.norm(x - x_old) < acc:
            break

    print("Solution:", x)

jaygsm(np.array([[4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1], [1, 2, 3, 4]]),
       np.array([[40], [40], [40], [40]]),
       100)

5- Curve fitting straight line:

import numpy as np
def jayslcf(x,y):
  x = np.array(x, dtype = float)
  y = np.array(y, dtype = float)
  A = np.array([[len(x), sum(x)],[sum(x), sum(x*x)]])
  B = np.array([[sum(y)],[sum(x*y)]])
  C = np.linalg.solve(A,B)
  a0 = C[0]
  a1 = C[1]
  print('y = %f + %f * x' %(a0, a1))
jayslcf(np.array([6,7,7,8,8,8,9,9,10]),
        np.array([5,5,4,5,4,3,4,3,3]))

6- Curve Fitting of Parabola:

import numpy as np
def jaypcf(x,y):
  x = np.array(x, dtype = float)
  y = np.array(y, dtype = float)
  A = np.array([[len(x), sum(x), sum(x*x)],[sum(x), sum(x*x),sum(x**3)],[sum(x*x),sum(x**3),sum(x**4)]])
  D = np.array([[sum(y)],[sum(x*y)],[sum(x**2*y)]])
  B = np.linalg.solve(A,D)
  a0 = B[0]
  a1 = B[1]
  a2 = B[2]
  print('y = %f + %f * x + %f  * x^2' %(a0, a1, a2))
jaypcf(np.array([0,1,2,3,4]),
       np.array([1,1.8,1.9,2,6.8]))

7- Curve Fitting of exponential:

import numpy as np
import math as m

def jayexp(x, y):
    x = np.array(x, dtype=float)
    y = np.array(y, dtype=float)
    X = np.log(x)
    Y = np.log(y)
    A = np.array([[len(X), sum(X)], [sum(X*X), sum(X*X)]])
    D = np.array([[sum(Y)], [sum(X*Y)]])
    B = np.linalg.solve(A, D)
    a0 = B[0]
    a1 = B[1]
    a = m.exp(a0)
    b = m.exp(a1)
    print("y = %f + %f * x" % (a, b))

jayexp(np.array([135, 140, 150, 155, 165, 170]),
       np.array([9.4342, 9.684, 10.1762, 10.4189, 10.8977, 11.134]))

8- Power equation curve fitting :

import numpy as np
import math as m

def jay_cfpe(x, y):
    x = x.astype(float)
    y = y.astype(float)
    X = np.log(x)
    Y = np.log(y)
    a = np.array([[len(x), sum(X)], [sum(X), sum(X*X)]])
    d = np.array([[sum(Y)], [sum(X*Y)]])
    b = np.linalg.solve(a, d)
    alpha = m.exp(b[0])
    beta = b[1]
    print("y = %.4f * x^%.4f" % (alpha, beta))

jay_cfpe(np.array([61, 36, 7, 2.6]), np.array([350, 400, 50, 600]))

9- Curve fitting of Quadratic equation:

import numpy as np
def jay_qcf(x,y):
    x = x.astype (float)
    y = y.astype(float)
    A = np.array ([ [len(x),sum(x),sum(x*x)],
                   [sum(x),sum(x*x),sum(x*x*x)],
                   [sum(x*x),sum(x*x*x),sum(x*x*x*x)]])
    B = np.array([[sum(y)],
                 [sum(x*y)],
                 [sum(x*x*y)]])
    C = np.linalg.solve(A,B)
    print("y = %.4f + % .4f * x + %.4f x*x "%(C[0],C[1],C[2]))
jay_qcf(np.array([6,7,7,8,8,8,9,9,10]),np.array([5,5,4,5,4,3,4,3,3]))

10- Lagrange's Interpolation:

import numpy as np
def b1_li(x,y,xr):
  x = np.array(x,dtype=float)
  y = np.array(y,dtype=float)
  n = len(x)
  yr = 0

  for i in range (n):
    L = 1
    for j in range (n):
      if j!= i:
        L = L * (xr - x[j]) / (x[i] - x[j])
    yr = yr + y[i] * L
  print("Answer = ",yr)
b1_li(np.array([5,7,11,13,17]), np.array([150,392,1452,2366,5202]),9)

11- Newton Forword diffrence Interpolation:

import numpy as np
import math as m
def b1_nfdi(x,y,xr):
  x = np.array(x,dtype=float)
  y = np.array(y,dtype=float)
  n = len(x)
  delta = np.zeros((n-1, n-1))
  for j in range (n-1):
    for i in range (n-1-j):
      if j == 0:
        delta[i,j] = y[i+1] - y[i]
      else:
        delta[i,j] = delta[i+1 , j-1] - delta[i , j-1]
  u = (xr - x[0]) / (x[1] - x[0])
  term = 0
  mult = 1
  for j in range (n-1):
    mult = mult * (u - j)
    term = term + delta[0 , j] / m.factorial(j+1) * mult
  yr = y[0] + term
  print("Answer = ", yr)
b1_nfdi(np.array([40,41,42,43,44,45]),np.array([52.5,50,47.5,45,43,41]),40.4)

12 - Trapezoidel Rule:

import math as m
def jay_tr(fun,x0,xn,n):
  h = (xn - x0) / n
  y0 = fun(x0)
  yn = fun(xn)
  yr = 0
  for i in range (1,n):
    yr = yr + fun(x0 + i * h)
  A = 1/2 * h * (y0 + yn + 2 * yr)
  print("Area = ", A)
jay_tr(lambda x: 1/(1+x**2),0,6,6)


13- Simphson's 1/3 Rule

import math as m
def jay_sim(fun,x0,xn,n):
  h = (xn - x0) / n
  y0 = fun(x0)
  yn = fun(xn)
  yodd = 0
  yevn = 0

  for i in range (1,n,2):
    yodd = yodd + fun(x0 + i * h)

  for j in range(2,n-1,2):
      yevn = yevn +  fun(x0 + j * h)

  A = 1/3 * h * (y0 + yn + 4 * yodd + 2 * yevn)
  print("Area = ", A)
jay_sim(lambda x: 1/(1+x**2),0,6,6)

14- Simphson's 3/8 Rule:

import math as m
def jay_sim18(fun,x0,xn,n):
  h = (xn - x0) / n
  y0 = fun(x0)
  yn = fun(xn)
  ym3 = 0
  yr =0
  for i in range (3,n-2,3):
    ym3 = ym3 + fun(x0 + i* h)
  for j in range(1,n):
      yr = yr +  fun(x0 + j* h)
  yr = yr - ym3
  A = 3/8 * h * (y0 + yn + 3 * yr + 2 * ym3)
  print("Area = ", A)
jay_sim18(lambda x: 1/(1+x**2),0,6,6)

15- Euler's Method:

import math as m
def jay_em(fun,x0,xn,y0,n):
  h = (xn - x0) / n
  for i in range(1,n+1):
    ynew = y0 + h * fun(x0,y0)
    x0 = x0 + h
    y0 = ynew
  print("xn= ",xn,"; yn = ",ynew)
jay_em(lambda x,y: x+y,0,1,1,5)

16- RK Method:

import math as m
def jay_rk(fun,x0,xn,y0,n):
  h = (xn - x0) / n

  for i in range(1,n+1):
    k1 = h * fun(x0,y0)
    k2 = h * fun(x0 + h,y0 + k1)

    ynew = y0 + 1/2*(k1+k2)
    x0 = x0 + h
    y0 = ynew
  print("xn= ",xn,"; yn = ",ynew)
jay_rk(lambda x,y: x+y,0,1,1,5)

17-  RK 4th Method:

import math as m
def jay_rk4(fun,x0,xn,y0,n):
  h = (xn - x0) / n

  for i in range(1,n+1):
    k1 = h * fun(x0,y0)
    k2 = h * fun(x0 + h / 2,y0 + k1 / 2)
    k3 = h * fun(x0 + h / 2 , y0 + k2 / 2)
    k4 = h * fun(x0 + h , y0 + k3)

    ynew = y0 + 1/6*(k1+2*k2+2*k3+k4)
    x0 = x0 + h
    y0 = ynew
  print("xn= ",xn,"; yn = ",ynew)
jay_rk4(lambda x,y: x+y,0,1,1,5)
